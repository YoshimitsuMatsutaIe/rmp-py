import numpy as np
from math import cos as c
from math import sin as s
from math import tan as ta
from math import sqrt as sq
from numba import njit

@njit("(f8[:, :](f8[:, :], f8[:, :], i8, f8, f8, f8, f8, f8, f8, f8))", cache=True)
def jry_dot(q, dq, n, d1, d3, d5, df, a4, a5, a7):
    q0 = q[0, 0]
    q1 = q[1, 0]
    q2 = q[2, 0]
    q3 = q[3, 0]
    q4 = q[4, 0]
    q5 = q[5, 0]
    q6 = q[6, 0]
    dq0 = dq[0, 0]
    dq1 = dq[1, 0]
    dq2 = dq[2, 0]
    dq3 = dq[3, 0]
    dq4 = dq[4, 0]
    dq5 = dq[5, 0]
    dq6 = dq[6, 0]
    if n == 0:
        return np.array([[-c(q0), 0., 0., 0., 0., 0., 0.], [-s(q0), 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0.]])
    elif n == 1:
        return np.array([[s(q0)*s(q1), -c(q0)*c(q1), 0., 0., 0., 0., 0.], [-s(q1)*c(q0), -s(q0)*c(q1), 0., 0., 0., 0., 0.], [0., s(q1), 0., 0., 0., 0., 0.]])
    elif n == 2:
        return np.array([[s(q0)*s(q2)*c(q1) - c(q0)*c(q2), s(q1)*s(q2)*c(q0), s(q0)*s(q2) - c(q0)*c(q1)*c(q2), 0., 0., 0., 0.], [-s(q0)*c(q2) - s(q2)*c(q0)*c(q1), s(q0)*s(q1)*s(q2), -s(q0)*c(q1)*c(q2) - s(q2)*c(q0), 0., 0., 0., 0.], [0., s(q2)*c(q1), s(q1)*c(q2), 0., 0., 0., 0.]])
    elif n == 3:
        return np.array([[-s(q0)*s(q1)*c(q3) + s(q0)*s(q3)*c(q1)*c(q2) + s(q2)*s(q3)*c(q0), (s(q1)*s(q3)*c(q2) + c(q1)*c(q3))*c(q0), (s(q0)*c(q2) + s(q2)*c(q0)*c(q1))*s(q3), s(q0)*s(q2)*c(q3) - s(q1)*s(q3)*c(q0) - c(q0)*c(q1)*c(q2)*c(q3), 0., 0., 0.], [s(q0)*s(q2)*s(q3) + s(q1)*c(q0)*c(q3) - s(q3)*c(q0)*c(q1)*c(q2), (s(q1)*s(q3)*c(q2) + c(q1)*c(q3))*s(q0), (s(q0)*s(q2)*c(q1) - c(q0)*c(q2))*s(q3), -s(q0)*s(q1)*s(q3) - s(q0)*c(q1)*c(q2)*c(q3) - s(q2)*c(q0)*c(q3), 0., 0., 0.], [0., -s(q1)*c(q3) + s(q3)*c(q1)*c(q2), -s(q1)*s(q2)*s(q3), s(q1)*c(q2)*c(q3) - s(q3)*c(q1), 0., 0., 0.]])
    elif n == 4:
        return np.array([[s(q0)*s(q1)*s(q3)*s(q4) + s(q0)*s(q2)*c(q1)*c(q4) + s(q0)*s(q4)*c(q1)*c(q2)*c(q3) + s(q2)*s(q4)*c(q0)*c(q3) - c(q0)*c(q2)*c(q4), (s(q1)*s(q2)*c(q4) + s(q1)*s(q4)*c(q2)*c(q3) - s(q3)*s(q4)*c(q1))*c(q0), s(q0)*s(q2)*c(q4) + s(q0)*s(q4)*c(q2)*c(q3) + s(q2)*s(q4)*c(q0)*c(q1)*c(q3) - c(q0)*c(q1)*c(q2)*c(q4), (-s(q0)*s(q2)*s(q3) - s(q1)*c(q0)*c(q3) + s(q3)*c(q0)*c(q1)*c(q2))*s(q4), s(q0)*s(q2)*c(q3)*c(q4) + s(q0)*s(q4)*c(q2) - s(q1)*s(q3)*c(q0)*c(q4) + s(q2)*s(q4)*c(q0)*c(q1) - c(q0)*c(q1)*c(q2)*c(q3)*c(q4), 0., 0.], [s(q0)*s(q2)*s(q4)*c(q3) - s(q0)*c(q2)*c(q4) - s(q1)*s(q3)*s(q4)*c(q0) - s(q2)*c(q0)*c(q1)*c(q4) - s(q4)*c(q0)*c(q1)*c(q2)*c(q3), (s(q1)*s(q2)*c(q4) + s(q1)*s(q4)*c(q2)*c(q3) - s(q3)*s(q4)*c(q1))*s(q0), s(q0)*s(q2)*s(q4)*c(q1)*c(q3) - s(q0)*c(q1)*c(q2)*c(q4) - s(q2)*c(q0)*c(q4) - s(q4)*c(q0)*c(q2)*c(q3), (-s(q0)*s(q1)*c(q3) + s(q0)*s(q3)*c(q1)*c(q2) + s(q2)*s(q3)*c(q0))*s(q4), -s(q0)*s(q1)*s(q3)*c(q4) + s(q0)*s(q2)*s(q4)*c(q1) - s(q0)*c(q1)*c(q2)*c(q3)*c(q4) - s(q2)*c(q0)*c(q3)*c(q4) - s(q4)*c(q0)*c(q2), 0., 0.], [0., s(q1)*s(q3)*s(q4) + s(q2)*c(q1)*c(q4) + s(q4)*c(q1)*c(q2)*c(q3), (-s(q2)*s(q4)*c(q3) + c(q2)*c(q4))*s(q1), (-s(q1)*s(q3)*c(q2) - c(q1)*c(q3))*s(q4), -s(q1)*s(q2)*s(q4) + s(q1)*c(q2)*c(q3)*c(q4) - s(q3)*c(q1)*c(q4), 0., 0.]])
    elif n == 5:
        return np.array([[s(q0)*s(q1)*s(q3)*s(q5)*c(q4) - s(q0)*s(q1)*c(q3)*c(q5) - s(q0)*s(q2)*s(q4)*s(q5)*c(q1) + s(q0)*s(q3)*c(q1)*c(q2)*c(q5) + s(q0)*s(q5)*c(q1)*c(q2)*c(q3)*c(q4) + s(q2)*s(q3)*c(q0)*c(q5) + s(q2)*s(q5)*c(q0)*c(q3)*c(q4) + s(q4)*s(q5)*c(q0)*c(q2), (-s(q1)*s(q2)*s(q4)*s(q5) + s(q1)*s(q3)*c(q2)*c(q5) + s(q1)*s(q5)*c(q2)*c(q3)*c(q4) - s(q3)*s(q5)*c(q1)*c(q4) + c(q1)*c(q3)*c(q5))*c(q0), -s(q0)*s(q2)*s(q4)*s(q5) + s(q0)*s(q3)*c(q2)*c(q5) + s(q0)*s(q5)*c(q2)*c(q3)*c(q4) + s(q2)*s(q3)*c(q0)*c(q1)*c(q5) + s(q2)*s(q5)*c(q0)*c(q1)*c(q3)*c(q4) + s(q4)*s(q5)*c(q0)*c(q1)*c(q2), -s(q0)*s(q2)*s(q3)*s(q5)*c(q4) + s(q0)*s(q2)*c(q3)*c(q5) - s(q1)*s(q3)*c(q0)*c(q5) - s(q1)*s(q5)*c(q0)*c(q3)*c(q4) + s(q3)*s(q5)*c(q0)*c(q1)*c(q2)*c(q4) - c(q0)*c(q1)*c(q2)*c(q3)*c(q5), (-s(q0)*s(q2)*s(q4)*c(q3) + s(q0)*c(q2)*c(q4) + s(q1)*s(q3)*s(q4)*c(q0) + s(q2)*c(q0)*c(q1)*c(q4) + s(q4)*c(q0)*c(q1)*c(q2)*c(q3))*s(q5), -s(q0)*s(q2)*s(q3)*s(q5) + s(q0)*s(q2)*c(q3)*c(q4)*c(q5) + s(q0)*s(q4)*c(q2)*c(q5) - s(q1)*s(q3)*c(q0)*c(q4)*c(q5) - s(q1)*s(q5)*c(q0)*c(q3) + s(q2)*s(q4)*c(q0)*c(q1)*c(q5) + s(q3)*s(q5)*c(q0)*c(q1)*c(q2) - c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5), 0.], [s(q0)*s(q2)*s(q3)*c(q5) + s(q0)*s(q2)*s(q5)*c(q3)*c(q4) + s(q0)*s(q4)*s(q5)*c(q2) - s(q1)*s(q3)*s(q5)*c(q0)*c(q4) + s(q1)*c(q0)*c(q3)*c(q5) + s(q2)*s(q4)*s(q5)*c(q0)*c(q1) - s(q3)*c(q0)*c(q1)*c(q2)*c(q5) - s(q5)*c(q0)*c(q1)*c(q2)*c(q3)*c(q4), (-s(q1)*s(q2)*s(q4)*s(q5) + s(q1)*s(q3)*c(q2)*c(q5) + s(q1)*s(q5)*c(q2)*c(q3)*c(q4) - s(q3)*s(q5)*c(q1)*c(q4) + c(q1)*c(q3)*c(q5))*s(q0), s(q0)*s(q2)*s(q3)*c(q1)*c(q5) + s(q0)*s(q2)*s(q5)*c(q1)*c(q3)*c(q4) + s(q0)*s(q4)*s(q5)*c(q1)*c(q2) + s(q2)*s(q4)*s(q5)*c(q0) - s(q3)*c(q0)*c(q2)*c(q5) - s(q5)*c(q0)*c(q2)*c(q3)*c(q4), -s(q0)*s(q1)*s(q3)*c(q5) - s(q0)*s(q1)*s(q5)*c(q3)*c(q4) + s(q0)*s(q3)*s(q5)*c(q1)*c(q2)*c(q4) - s(q0)*c(q1)*c(q2)*c(q3)*c(q5) + s(q2)*s(q3)*s(q5)*c(q0)*c(q4) - s(q2)*c(q0)*c(q3)*c(q5), (s(q0)*s(q1)*s(q3)*s(q4) + s(q0)*s(q2)*c(q1)*c(q4) + s(q0)*s(q4)*c(q1)*c(q2)*c(q3) + s(q2)*s(q4)*c(q0)*c(q3) - c(q0)*c(q2)*c(q4))*s(q5), -s(q0)*s(q1)*s(q3)*c(q4)*c(q5) - s(q0)*s(q1)*s(q5)*c(q3) + s(q0)*s(q2)*s(q4)*c(q1)*c(q5) + s(q0)*s(q3)*s(q5)*c(q1)*c(q2) - s(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5) + s(q2)*s(q3)*s(q5)*c(q0) - s(q2)*c(q0)*c(q3)*c(q4)*c(q5) - s(q4)*c(q0)*c(q2)*c(q5), 0.], [0., s(q1)*s(q3)*s(q5)*c(q4) - s(q1)*c(q3)*c(q5) - s(q2)*s(q4)*s(q5)*c(q1) + s(q3)*c(q1)*c(q2)*c(q5) + s(q5)*c(q1)*c(q2)*c(q3)*c(q4), (-s(q2)*s(q3)*c(q5) - s(q2)*s(q5)*c(q3)*c(q4) - s(q4)*s(q5)*c(q2))*s(q1), -s(q1)*s(q3)*s(q5)*c(q2)*c(q4) + s(q1)*c(q2)*c(q3)*c(q5) - s(q3)*c(q1)*c(q5) - s(q5)*c(q1)*c(q3)*c(q4), (-s(q1)*s(q2)*c(q4) - s(q1)*s(q4)*c(q2)*c(q3) + s(q3)*s(q4)*c(q1))*s(q5), -s(q1)*s(q2)*s(q4)*c(q5) - s(q1)*s(q3)*s(q5)*c(q2) + s(q1)*c(q2)*c(q3)*c(q4)*c(q5) - s(q3)*c(q1)*c(q4)*c(q5) - s(q5)*c(q1)*c(q3), 0.]])
    elif n == 6:
        return np.array([[-s(q0)*s(q1)*s(q3)*s(q4)*c(q6) + s(q0)*s(q1)*s(q3)*s(q6)*c(q4)*c(q5) + s(q0)*s(q1)*s(q5)*s(q6)*c(q3) - s(q0)*s(q2)*s(q4)*s(q6)*c(q1)*c(q5) - s(q0)*s(q2)*c(q1)*c(q4)*c(q6) - s(q0)*s(q3)*s(q5)*s(q6)*c(q1)*c(q2) - s(q0)*s(q4)*c(q1)*c(q2)*c(q3)*c(q6) + s(q0)*s(q6)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5) - s(q2)*s(q3)*s(q5)*s(q6)*c(q0) - s(q2)*s(q4)*c(q0)*c(q3)*c(q6) + s(q2)*s(q6)*c(q0)*c(q3)*c(q4)*c(q5) + s(q4)*s(q6)*c(q0)*c(q2)*c(q5) + c(q0)*c(q2)*c(q4)*c(q6), (-s(q1)*s(q2)*s(q4)*s(q6)*c(q5) - s(q1)*s(q2)*c(q4)*c(q6) - s(q1)*s(q3)*s(q5)*s(q6)*c(q2) - s(q1)*s(q4)*c(q2)*c(q3)*c(q6) + s(q1)*s(q6)*c(q2)*c(q3)*c(q4)*c(q5) + s(q3)*s(q4)*c(q1)*c(q6) - s(q3)*s(q6)*c(q1)*c(q4)*c(q5) - s(q5)*s(q6)*c(q1)*c(q3))*c(q0), -s(q0)*s(q2)*s(q4)*s(q6)*c(q5) - s(q0)*s(q2)*c(q4)*c(q6) - s(q0)*s(q3)*s(q5)*s(q6)*c(q2) - s(q0)*s(q4)*c(q2)*c(q3)*c(q6) + s(q0)*s(q6)*c(q2)*c(q3)*c(q4)*c(q5) - s(q2)*s(q3)*s(q5)*s(q6)*c(q0)*c(q1) - s(q2)*s(q4)*c(q0)*c(q1)*c(q3)*c(q6) + s(q2)*s(q6)*c(q0)*c(q1)*c(q3)*c(q4)*c(q5) + s(q4)*s(q6)*c(q0)*c(q1)*c(q2)*c(q5) + c(q0)*c(q1)*c(q2)*c(q4)*c(q6), s(q0)*s(q2)*s(q3)*s(q4)*c(q6) - s(q0)*s(q2)*s(q3)*s(q6)*c(q4)*c(q5) - s(q0)*s(q2)*s(q5)*s(q6)*c(q3) + s(q1)*s(q3)*s(q5)*s(q6)*c(q0) + s(q1)*s(q4)*c(q0)*c(q3)*c(q6) - s(q1)*s(q6)*c(q0)*c(q3)*c(q4)*c(q5) - s(q3)*s(q4)*c(q0)*c(q1)*c(q2)*c(q6) + s(q3)*s(q6)*c(q0)*c(q1)*c(q2)*c(q4)*c(q5) + s(q5)*s(q6)*c(q0)*c(q1)*c(q2)*c(q3), -s(q0)*s(q2)*s(q4)*s(q6)*c(q3)*c(q5) - s(q0)*s(q2)*c(q3)*c(q4)*c(q6) - s(q0)*s(q4)*c(q2)*c(q6) + s(q0)*s(q6)*c(q2)*c(q4)*c(q5) + s(q1)*s(q3)*s(q4)*s(q6)*c(q0)*c(q5) + s(q1)*s(q3)*c(q0)*c(q4)*c(q6) - s(q2)*s(q4)*c(q0)*c(q1)*c(q6) + s(q2)*s(q6)*c(q0)*c(q1)*c(q4)*c(q5) + s(q4)*s(q6)*c(q0)*c(q1)*c(q2)*c(q3)*c(q5) + c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q6), (-s(q0)*s(q2)*s(q3)*c(q5) - s(q0)*s(q2)*s(q5)*c(q3)*c(q4) - s(q0)*s(q4)*s(q5)*c(q2) + s(q1)*s(q3)*s(q5)*c(q0)*c(q4) - s(q1)*c(q0)*c(q3)*c(q5) - s(q2)*s(q4)*s(q5)*c(q0)*c(q1) + s(q3)*c(q0)*c(q1)*c(q2)*c(q5) + s(q5)*c(q0)*c(q1)*c(q2)*c(q3)*c(q4))*s(q6), -s(q0)*s(q2)*s(q3)*s(q5)*c(q6) + s(q0)*s(q2)*s(q4)*s(q6)*c(q3) + s(q0)*s(q2)*c(q3)*c(q4)*c(q5)*c(q6) + s(q0)*s(q4)*c(q2)*c(q5)*c(q6) - s(q0)*s(q6)*c(q2)*c(q4) - s(q1)*s(q3)*s(q4)*s(q6)*c(q0) - s(q1)*s(q3)*c(q0)*c(q4)*c(q5)*c(q6) - s(q1)*s(q5)*c(q0)*c(q3)*c(q6) + s(q2)*s(q4)*c(q0)*c(q1)*c(q5)*c(q6) - s(q2)*s(q6)*c(q0)*c(q1)*c(q4) + s(q3)*s(q5)*c(q0)*c(q1)*c(q2)*c(q6) - s(q4)*s(q6)*c(q0)*c(q1)*c(q2)*c(q3) - c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5)*c(q6)], [-s(q0)*s(q2)*s(q3)*s(q5)*s(q6) - s(q0)*s(q2)*s(q4)*c(q3)*c(q6) + s(q0)*s(q2)*s(q6)*c(q3)*c(q4)*c(q5) + s(q0)*s(q4)*s(q6)*c(q2)*c(q5) + s(q0)*c(q2)*c(q4)*c(q6) + s(q1)*s(q3)*s(q4)*c(q0)*c(q6) - s(q1)*s(q3)*s(q6)*c(q0)*c(q4)*c(q5) - s(q1)*s(q5)*s(q6)*c(q0)*c(q3) + s(q2)*s(q4)*s(q6)*c(q0)*c(q1)*c(q5) + s(q2)*c(q0)*c(q1)*c(q4)*c(q6) + s(q3)*s(q5)*s(q6)*c(q0)*c(q1)*c(q2) + s(q4)*c(q0)*c(q1)*c(q2)*c(q3)*c(q6) - s(q6)*c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5), (-s(q1)*s(q2)*s(q4)*s(q6)*c(q5) - s(q1)*s(q2)*c(q4)*c(q6) - s(q1)*s(q3)*s(q5)*s(q6)*c(q2) - s(q1)*s(q4)*c(q2)*c(q3)*c(q6) + s(q1)*s(q6)*c(q2)*c(q3)*c(q4)*c(q5) + s(q3)*s(q4)*c(q1)*c(q6) - s(q3)*s(q6)*c(q1)*c(q4)*c(q5) - s(q5)*s(q6)*c(q1)*c(q3))*s(q0), -s(q0)*s(q2)*s(q3)*s(q5)*s(q6)*c(q1) - s(q0)*s(q2)*s(q4)*c(q1)*c(q3)*c(q6) + s(q0)*s(q2)*s(q6)*c(q1)*c(q3)*c(q4)*c(q5) + s(q0)*s(q4)*s(q6)*c(q1)*c(q2)*c(q5) + s(q0)*c(q1)*c(q2)*c(q4)*c(q6) + s(q2)*s(q4)*s(q6)*c(q0)*c(q5) + s(q2)*c(q0)*c(q4)*c(q6) + s(q3)*s(q5)*s(q6)*c(q0)*c(q2) + s(q4)*c(q0)*c(q2)*c(q3)*c(q6) - s(q6)*c(q0)*c(q2)*c(q3)*c(q4)*c(q5), s(q0)*s(q1)*s(q3)*s(q5)*s(q6) + s(q0)*s(q1)*s(q4)*c(q3)*c(q6) - s(q0)*s(q1)*s(q6)*c(q3)*c(q4)*c(q5) - s(q0)*s(q3)*s(q4)*c(q1)*c(q2)*c(q6) + s(q0)*s(q3)*s(q6)*c(q1)*c(q2)*c(q4)*c(q5) + s(q0)*s(q5)*s(q6)*c(q1)*c(q2)*c(q3) - s(q2)*s(q3)*s(q4)*c(q0)*c(q6) + s(q2)*s(q3)*s(q6)*c(q0)*c(q4)*c(q5) + s(q2)*s(q5)*s(q6)*c(q0)*c(q3), s(q0)*s(q1)*s(q3)*s(q4)*s(q6)*c(q5) + s(q0)*s(q1)*s(q3)*c(q4)*c(q6) - s(q0)*s(q2)*s(q4)*c(q1)*c(q6) + s(q0)*s(q2)*s(q6)*c(q1)*c(q4)*c(q5) + s(q0)*s(q4)*s(q6)*c(q1)*c(q2)*c(q3)*c(q5) + s(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q6) + s(q2)*s(q4)*s(q6)*c(q0)*c(q3)*c(q5) + s(q2)*c(q0)*c(q3)*c(q4)*c(q6) + s(q4)*c(q0)*c(q2)*c(q6) - s(q6)*c(q0)*c(q2)*c(q4)*c(q5), (s(q0)*s(q1)*s(q3)*s(q5)*c(q4) - s(q0)*s(q1)*c(q3)*c(q5) - s(q0)*s(q2)*s(q4)*s(q5)*c(q1) + s(q0)*s(q3)*c(q1)*c(q2)*c(q5) + s(q0)*s(q5)*c(q1)*c(q2)*c(q3)*c(q4) + s(q2)*s(q3)*c(q0)*c(q5) + s(q2)*s(q5)*c(q0)*c(q3)*c(q4) + s(q4)*s(q5)*c(q0)*c(q2))*s(q6), -s(q0)*s(q1)*s(q3)*s(q4)*s(q6) - s(q0)*s(q1)*s(q3)*c(q4)*c(q5)*c(q6) - s(q0)*s(q1)*s(q5)*c(q3)*c(q6) + s(q0)*s(q2)*s(q4)*c(q1)*c(q5)*c(q6) - s(q0)*s(q2)*s(q6)*c(q1)*c(q4) + s(q0)*s(q3)*s(q5)*c(q1)*c(q2)*c(q6) - s(q0)*s(q4)*s(q6)*c(q1)*c(q2)*c(q3) - s(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5)*c(q6) + s(q2)*s(q3)*s(q5)*c(q0)*c(q6) - s(q2)*s(q4)*s(q6)*c(q0)*c(q3) - s(q2)*c(q0)*c(q3)*c(q4)*c(q5)*c(q6) - s(q4)*c(q0)*c(q2)*c(q5)*c(q6) + s(q6)*c(q0)*c(q2)*c(q4)], [0., -s(q1)*s(q3)*s(q4)*c(q6) + s(q1)*s(q3)*s(q6)*c(q4)*c(q5) + s(q1)*s(q5)*s(q6)*c(q3) - s(q2)*s(q4)*s(q6)*c(q1)*c(q5) - s(q2)*c(q1)*c(q4)*c(q6) - s(q3)*s(q5)*s(q6)*c(q1)*c(q2) - s(q4)*c(q1)*c(q2)*c(q3)*c(q6) + s(q6)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5), (s(q2)*s(q3)*s(q5)*s(q6) + s(q2)*s(q4)*c(q3)*c(q6) - s(q2)*s(q6)*c(q3)*c(q4)*c(q5) - s(q4)*s(q6)*c(q2)*c(q5) - c(q2)*c(q4)*c(q6))*s(q1), s(q1)*s(q3)*s(q4)*c(q2)*c(q6) - s(q1)*s(q3)*s(q6)*c(q2)*c(q4)*c(q5) - s(q1)*s(q5)*s(q6)*c(q2)*c(q3) + s(q3)*s(q5)*s(q6)*c(q1) + s(q4)*c(q1)*c(q3)*c(q6) - s(q6)*c(q1)*c(q3)*c(q4)*c(q5), s(q1)*s(q2)*s(q4)*c(q6) - s(q1)*s(q2)*s(q6)*c(q4)*c(q5) - s(q1)*s(q4)*s(q6)*c(q2)*c(q3)*c(q5) - s(q1)*c(q2)*c(q3)*c(q4)*c(q6) + s(q3)*s(q4)*s(q6)*c(q1)*c(q5) + s(q3)*c(q1)*c(q4)*c(q6), (s(q1)*s(q2)*s(q4)*s(q5) - s(q1)*s(q3)*c(q2)*c(q5) - s(q1)*s(q5)*c(q2)*c(q3)*c(q4) + s(q3)*s(q5)*c(q1)*c(q4) - c(q1)*c(q3)*c(q5))*s(q6), -s(q1)*s(q2)*s(q4)*c(q5)*c(q6) + s(q1)*s(q2)*s(q6)*c(q4) - s(q1)*s(q3)*s(q5)*c(q2)*c(q6) + s(q1)*s(q4)*s(q6)*c(q2)*c(q3) + s(q1)*c(q2)*c(q3)*c(q4)*c(q5)*c(q6) - s(q3)*s(q4)*s(q6)*c(q1) - s(q3)*c(q1)*c(q4)*c(q5)*c(q6) - s(q5)*c(q1)*c(q3)*c(q6)]])
    elif n == 7:
        return np.array([[-s(q0)*s(q1)*s(q3)*s(q4)*c(q6) + s(q0)*s(q1)*s(q3)*s(q6)*c(q4)*c(q5) + s(q0)*s(q1)*s(q5)*s(q6)*c(q3) - s(q0)*s(q2)*s(q4)*s(q6)*c(q1)*c(q5) - s(q0)*s(q2)*c(q1)*c(q4)*c(q6) - s(q0)*s(q3)*s(q5)*s(q6)*c(q1)*c(q2) - s(q0)*s(q4)*c(q1)*c(q2)*c(q3)*c(q6) + s(q0)*s(q6)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5) - s(q2)*s(q3)*s(q5)*s(q6)*c(q0) - s(q2)*s(q4)*c(q0)*c(q3)*c(q6) + s(q2)*s(q6)*c(q0)*c(q3)*c(q4)*c(q5) + s(q4)*s(q6)*c(q0)*c(q2)*c(q5) + c(q0)*c(q2)*c(q4)*c(q6), (-s(q1)*s(q2)*s(q4)*s(q6)*c(q5) - s(q1)*s(q2)*c(q4)*c(q6) - s(q1)*s(q3)*s(q5)*s(q6)*c(q2) - s(q1)*s(q4)*c(q2)*c(q3)*c(q6) + s(q1)*s(q6)*c(q2)*c(q3)*c(q4)*c(q5) + s(q3)*s(q4)*c(q1)*c(q6) - s(q3)*s(q6)*c(q1)*c(q4)*c(q5) - s(q5)*s(q6)*c(q1)*c(q3))*c(q0), -s(q0)*s(q2)*s(q4)*s(q6)*c(q5) - s(q0)*s(q2)*c(q4)*c(q6) - s(q0)*s(q3)*s(q5)*s(q6)*c(q2) - s(q0)*s(q4)*c(q2)*c(q3)*c(q6) + s(q0)*s(q6)*c(q2)*c(q3)*c(q4)*c(q5) - s(q2)*s(q3)*s(q5)*s(q6)*c(q0)*c(q1) - s(q2)*s(q4)*c(q0)*c(q1)*c(q3)*c(q6) + s(q2)*s(q6)*c(q0)*c(q1)*c(q3)*c(q4)*c(q5) + s(q4)*s(q6)*c(q0)*c(q1)*c(q2)*c(q5) + c(q0)*c(q1)*c(q2)*c(q4)*c(q6), s(q0)*s(q2)*s(q3)*s(q4)*c(q6) - s(q0)*s(q2)*s(q3)*s(q6)*c(q4)*c(q5) - s(q0)*s(q2)*s(q5)*s(q6)*c(q3) + s(q1)*s(q3)*s(q5)*s(q6)*c(q0) + s(q1)*s(q4)*c(q0)*c(q3)*c(q6) - s(q1)*s(q6)*c(q0)*c(q3)*c(q4)*c(q5) - s(q3)*s(q4)*c(q0)*c(q1)*c(q2)*c(q6) + s(q3)*s(q6)*c(q0)*c(q1)*c(q2)*c(q4)*c(q5) + s(q5)*s(q6)*c(q0)*c(q1)*c(q2)*c(q3), -s(q0)*s(q2)*s(q4)*s(q6)*c(q3)*c(q5) - s(q0)*s(q2)*c(q3)*c(q4)*c(q6) - s(q0)*s(q4)*c(q2)*c(q6) + s(q0)*s(q6)*c(q2)*c(q4)*c(q5) + s(q1)*s(q3)*s(q4)*s(q6)*c(q0)*c(q5) + s(q1)*s(q3)*c(q0)*c(q4)*c(q6) - s(q2)*s(q4)*c(q0)*c(q1)*c(q6) + s(q2)*s(q6)*c(q0)*c(q1)*c(q4)*c(q5) + s(q4)*s(q6)*c(q0)*c(q1)*c(q2)*c(q3)*c(q5) + c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q6), (-s(q0)*s(q2)*s(q3)*c(q5) - s(q0)*s(q2)*s(q5)*c(q3)*c(q4) - s(q0)*s(q4)*s(q5)*c(q2) + s(q1)*s(q3)*s(q5)*c(q0)*c(q4) - s(q1)*c(q0)*c(q3)*c(q5) - s(q2)*s(q4)*s(q5)*c(q0)*c(q1) + s(q3)*c(q0)*c(q1)*c(q2)*c(q5) + s(q5)*c(q0)*c(q1)*c(q2)*c(q3)*c(q4))*s(q6), -s(q0)*s(q2)*s(q3)*s(q5)*c(q6) + s(q0)*s(q2)*s(q4)*s(q6)*c(q3) + s(q0)*s(q2)*c(q3)*c(q4)*c(q5)*c(q6) + s(q0)*s(q4)*c(q2)*c(q5)*c(q6) - s(q0)*s(q6)*c(q2)*c(q4) - s(q1)*s(q3)*s(q4)*s(q6)*c(q0) - s(q1)*s(q3)*c(q0)*c(q4)*c(q5)*c(q6) - s(q1)*s(q5)*c(q0)*c(q3)*c(q6) + s(q2)*s(q4)*c(q0)*c(q1)*c(q5)*c(q6) - s(q2)*s(q6)*c(q0)*c(q1)*c(q4) + s(q3)*s(q5)*c(q0)*c(q1)*c(q2)*c(q6) - s(q4)*s(q6)*c(q0)*c(q1)*c(q2)*c(q3) - c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5)*c(q6)], [-s(q0)*s(q2)*s(q3)*s(q5)*s(q6) - s(q0)*s(q2)*s(q4)*c(q3)*c(q6) + s(q0)*s(q2)*s(q6)*c(q3)*c(q4)*c(q5) + s(q0)*s(q4)*s(q6)*c(q2)*c(q5) + s(q0)*c(q2)*c(q4)*c(q6) + s(q1)*s(q3)*s(q4)*c(q0)*c(q6) - s(q1)*s(q3)*s(q6)*c(q0)*c(q4)*c(q5) - s(q1)*s(q5)*s(q6)*c(q0)*c(q3) + s(q2)*s(q4)*s(q6)*c(q0)*c(q1)*c(q5) + s(q2)*c(q0)*c(q1)*c(q4)*c(q6) + s(q3)*s(q5)*s(q6)*c(q0)*c(q1)*c(q2) + s(q4)*c(q0)*c(q1)*c(q2)*c(q3)*c(q6) - s(q6)*c(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5), (-s(q1)*s(q2)*s(q4)*s(q6)*c(q5) - s(q1)*s(q2)*c(q4)*c(q6) - s(q1)*s(q3)*s(q5)*s(q6)*c(q2) - s(q1)*s(q4)*c(q2)*c(q3)*c(q6) + s(q1)*s(q6)*c(q2)*c(q3)*c(q4)*c(q5) + s(q3)*s(q4)*c(q1)*c(q6) - s(q3)*s(q6)*c(q1)*c(q4)*c(q5) - s(q5)*s(q6)*c(q1)*c(q3))*s(q0), -s(q0)*s(q2)*s(q3)*s(q5)*s(q6)*c(q1) - s(q0)*s(q2)*s(q4)*c(q1)*c(q3)*c(q6) + s(q0)*s(q2)*s(q6)*c(q1)*c(q3)*c(q4)*c(q5) + s(q0)*s(q4)*s(q6)*c(q1)*c(q2)*c(q5) + s(q0)*c(q1)*c(q2)*c(q4)*c(q6) + s(q2)*s(q4)*s(q6)*c(q0)*c(q5) + s(q2)*c(q0)*c(q4)*c(q6) + s(q3)*s(q5)*s(q6)*c(q0)*c(q2) + s(q4)*c(q0)*c(q2)*c(q3)*c(q6) - s(q6)*c(q0)*c(q2)*c(q3)*c(q4)*c(q5), s(q0)*s(q1)*s(q3)*s(q5)*s(q6) + s(q0)*s(q1)*s(q4)*c(q3)*c(q6) - s(q0)*s(q1)*s(q6)*c(q3)*c(q4)*c(q5) - s(q0)*s(q3)*s(q4)*c(q1)*c(q2)*c(q6) + s(q0)*s(q3)*s(q6)*c(q1)*c(q2)*c(q4)*c(q5) + s(q0)*s(q5)*s(q6)*c(q1)*c(q2)*c(q3) - s(q2)*s(q3)*s(q4)*c(q0)*c(q6) + s(q2)*s(q3)*s(q6)*c(q0)*c(q4)*c(q5) + s(q2)*s(q5)*s(q6)*c(q0)*c(q3), s(q0)*s(q1)*s(q3)*s(q4)*s(q6)*c(q5) + s(q0)*s(q1)*s(q3)*c(q4)*c(q6) - s(q0)*s(q2)*s(q4)*c(q1)*c(q6) + s(q0)*s(q2)*s(q6)*c(q1)*c(q4)*c(q5) + s(q0)*s(q4)*s(q6)*c(q1)*c(q2)*c(q3)*c(q5) + s(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q6) + s(q2)*s(q4)*s(q6)*c(q0)*c(q3)*c(q5) + s(q2)*c(q0)*c(q3)*c(q4)*c(q6) + s(q4)*c(q0)*c(q2)*c(q6) - s(q6)*c(q0)*c(q2)*c(q4)*c(q5), (s(q0)*s(q1)*s(q3)*s(q5)*c(q4) - s(q0)*s(q1)*c(q3)*c(q5) - s(q0)*s(q2)*s(q4)*s(q5)*c(q1) + s(q0)*s(q3)*c(q1)*c(q2)*c(q5) + s(q0)*s(q5)*c(q1)*c(q2)*c(q3)*c(q4) + s(q2)*s(q3)*c(q0)*c(q5) + s(q2)*s(q5)*c(q0)*c(q3)*c(q4) + s(q4)*s(q5)*c(q0)*c(q2))*s(q6), -s(q0)*s(q1)*s(q3)*s(q4)*s(q6) - s(q0)*s(q1)*s(q3)*c(q4)*c(q5)*c(q6) - s(q0)*s(q1)*s(q5)*c(q3)*c(q6) + s(q0)*s(q2)*s(q4)*c(q1)*c(q5)*c(q6) - s(q0)*s(q2)*s(q6)*c(q1)*c(q4) + s(q0)*s(q3)*s(q5)*c(q1)*c(q2)*c(q6) - s(q0)*s(q4)*s(q6)*c(q1)*c(q2)*c(q3) - s(q0)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5)*c(q6) + s(q2)*s(q3)*s(q5)*c(q0)*c(q6) - s(q2)*s(q4)*s(q6)*c(q0)*c(q3) - s(q2)*c(q0)*c(q3)*c(q4)*c(q5)*c(q6) - s(q4)*c(q0)*c(q2)*c(q5)*c(q6) + s(q6)*c(q0)*c(q2)*c(q4)], [0., -s(q1)*s(q3)*s(q4)*c(q6) + s(q1)*s(q3)*s(q6)*c(q4)*c(q5) + s(q1)*s(q5)*s(q6)*c(q3) - s(q2)*s(q4)*s(q6)*c(q1)*c(q5) - s(q2)*c(q1)*c(q4)*c(q6) - s(q3)*s(q5)*s(q6)*c(q1)*c(q2) - s(q4)*c(q1)*c(q2)*c(q3)*c(q6) + s(q6)*c(q1)*c(q2)*c(q3)*c(q4)*c(q5), (s(q2)*s(q3)*s(q5)*s(q6) + s(q2)*s(q4)*c(q3)*c(q6) - s(q2)*s(q6)*c(q3)*c(q4)*c(q5) - s(q4)*s(q6)*c(q2)*c(q5) - c(q2)*c(q4)*c(q6))*s(q1), s(q1)*s(q3)*s(q4)*c(q2)*c(q6) - s(q1)*s(q3)*s(q6)*c(q2)*c(q4)*c(q5) - s(q1)*s(q5)*s(q6)*c(q2)*c(q3) + s(q3)*s(q5)*s(q6)*c(q1) + s(q4)*c(q1)*c(q3)*c(q6) - s(q6)*c(q1)*c(q3)*c(q4)*c(q5), s(q1)*s(q2)*s(q4)*c(q6) - s(q1)*s(q2)*s(q6)*c(q4)*c(q5) - s(q1)*s(q4)*s(q6)*c(q2)*c(q3)*c(q5) - s(q1)*c(q2)*c(q3)*c(q4)*c(q6) + s(q3)*s(q4)*s(q6)*c(q1)*c(q5) + s(q3)*c(q1)*c(q4)*c(q6), (s(q1)*s(q2)*s(q4)*s(q5) - s(q1)*s(q3)*c(q2)*c(q5) - s(q1)*s(q5)*c(q2)*c(q3)*c(q4) + s(q3)*s(q5)*c(q1)*c(q4) - c(q1)*c(q3)*c(q5))*s(q6), -s(q1)*s(q2)*s(q4)*c(q5)*c(q6) + s(q1)*s(q2)*s(q6)*c(q4) - s(q1)*s(q3)*s(q5)*c(q2)*c(q6) + s(q1)*s(q4)*s(q6)*c(q2)*c(q3) + s(q1)*c(q2)*c(q3)*c(q4)*c(q5)*c(q6) - s(q3)*s(q4)*s(q6)*c(q1) - s(q3)*c(q1)*c(q4)*c(q5)*c(q6) - s(q5)*c(q1)*c(q3)*c(q6)]])
    else:
        assert(False)

